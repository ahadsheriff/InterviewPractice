from collections import deque

def repair_machine(network, initial_machines):

    node = None
    max_effect = float('-inf')
    
    for machine in initial_machines:
        repaired_machines = (repairer(network, machine))
        if repaired_machines > max_effect:
            node = machine
            max_effect = repaired_machines

    return [node, max_effect]

def repairer(network, machine):
    
    rows = len(network[0])
    visited = [False] * rows
    count = 0

    queue = deque()
    queue.append(machine)

    while queue:
        pointer = queue.popleft()

        if visited[pointer]:
            continue

        count += 1
        
        visited[pointer] = True
        pointer_row = network[pointer]

        for i in range(rows):
            if pointer_row[i] == 1:
                queue.appendleft(i)

    return count


def main():
    network = [
        [1, 0, 1, 0, 0],
        [0, 1, 0, 1, 0],
        [1, 0, 1, 0, 0],
        [0, 1, 0, 1, 1],
        [0, 0, 0, 1, 1]
    ]

    initial_machines = [0, 4]

    print(repair_machine(network, initial_machines))

main()
